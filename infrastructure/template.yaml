AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: The model and prompt evaluation solution
Parameters:
  ProjectName:
    AllowedPattern: '[A-Za-z0-9-]{1,16}'
    ConstraintDescription: >-
      Maximum of 22 alphanumeric characters. Can include hyphens (-), but not
      spaces. Must be unique within your account in an AWS Region.
    Description: Project Name used to identify your resources
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: LLM-Eval
  ECSClusterName:
    Type: String
    Description: Specifies the ECS Cluster Name with which the resources would be associated
    Default: llm-eval-api-cluster
  VpcCIDR:
    Type: String
    Default: 10.2.0.0/16
  PublicSubnetCIDRA:
    Type: String
    Default: 10.2.0.0/24
  PrivateSubnetCIDRA:
    Type: String
    Default: 10.2.1.0/24
  PublicSubnetCIDRB:
    Type: String
    Default: 10.2.2.0/24
  PrivateSubnetCIDRB:
    Type: String
    Default: 10.2.3.0/24
  TrainingURL:
    Type: String
    Description: the training image
  MetricPrefix:
    Type: String
    Default: fmeval


Resources:
  # VPC relates resources
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDRA
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-a'
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDRB
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-b'
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDRA
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-a'
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDRB
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-b'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  ElasticIPAddress:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-NAT'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for SageMaker Model
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-model-security-group'
  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      GroupId: !Ref SecurityGroup
      SourceSecurityGroupId: !Ref SecurityGroup

  LLMInternalALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LLM-API-Layer
      Scheme: internal
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets:
        # private subnet
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  #ECS based LLM invoke service
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Ref: ECSClusterName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: llm-eval-api-layer
      Tags: [ ]

  LLMTaskDefination:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "ApiLayerDefinition"
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 8GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: api-layer
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: "us-west-2"
            - Name: AWS_REGION
              Value: "us-west-2"
          Image:  !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/api-layer:latest"
          Command:
            - "--host"
            - "0.0.0.0"
            - "--port"
            - "8001"
            - "--table-name"
            - "api-layer-ddb"
          PortMappings:
            - ContainerPort: 8001
              HostPort: 8001
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ProjectName,/, FastChatDefinition]]
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !Ref ProjectName, ExecutionRole ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  SageMakerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !Ref ProjectName, SagemakerRole ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        # TODO narrow down
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !Ref ProjectName, TaskRole ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "SageMakerInvokePermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sagemaker:InvokeEndpoint"
                  - "s3:*"
                  - "dynamodb:GetItem"
                  - "bedrock:*"
                Resource: "*"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref LLMTaskDefination
      LaunchType: FARGATE
      ServiceName: LLM-Invoke_API
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      LoadBalancers:
      - ContainerName: api-layer
        ContainerPort: 8001
        LoadBalancerName:
          Ref: AWS::NoValue
        TargetGroupArn:
          Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
    - Listener

  #IAM role for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ECSClusterName, "AutoScalingRole"]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: '5'
      MinCapacity: '2'
      ResourceId: !Sub "service/${ECSClusterName}/LLM-Invoke_API"
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - ECSService

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: LLMInvoke
      PolicyType: TargetTrackingScaling
      ResourceId: !Sub "service/${ECSClusterName}/LLM-Invoke_API"
      ScalingTargetId:
        Ref: AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        ScaleInCooldown: '100'
        ScaleOutCooldown: '100'
        TargetValue: '70'
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: "/ping"
      Name: LLMInvokeTG
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn: !Ref LLMInternalALB
      Port: '8001'
      Protocol: HTTP

  EvaluationBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName:
        Fn::Sub: 'llm-evaluation-${AWS::AccountId}-${AWS::Region}'
  LLMInvocationStatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                # TODO: narrow down
                Resource: "*"
        - PolicyName: StatesLogPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DeleteResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                Resource: "*"
        - PolicyName: S3Permission
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*Object
                Resource:
                  - !Sub  "arn:aws:s3:::${EvaluationBucket}/*"
  InvokeLLMStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: Invoke-LLM
      DefinitionString:
        Fn::Sub:
          - |-
            {
              "Comment": "Invoke LLM",
              "StartAt": "GetQuestions",
              "States": {
                "GetQuestions": {
                  "Type": "Task",
                  "Parameters": {
                    "Bucket.$": "$.question_bucket",
                    "Key.$": "$.question_key"
                  },
                  "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
                  "ResultSelector": {
                    "prompts.$": "$.Body"
                  },
                  "ResultPath": "$.prompts",
                  "Next": "ParseQuestions"
                },
                "ParseQuestions": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "FunctionName": "${ConvertToJsonLambdaArn}",
                    "Payload": {
                      "executionId.$": "$$.Execution.Id",
                      "input.$": "$"
                    }
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "Map"
                },
                "Map": {
                  "Type": "Map",
                  "ItemProcessor": {
                    "ProcessorConfig": {
                      "Mode": "INLINE"
                    },
                    "StartAt": "invoke_llm",
                    "States": {
                      "invoke_llm": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "OutputPath": "$.Payload",
                        "Parameters": {
                          "Payload.$": "$",
                          "FunctionName": "${InvokeLambdaArn}"
                        },
                        "Retry": [
                          {
                            "ErrorEquals": [
                              "States.ALL"
                            ],
                            "IntervalSeconds": 1,
                            "MaxAttempts": 1,
                            "BackoffRate": 2
                          }
                        ],
                        "Catch": [
                          {
                            "ErrorEquals": [
                              "States.ALL"
                            ],
                            "Next": "InvokeError",
                            "ResultPath": null
                          }
                        ],
                        "End": true
                      },
                      "InvokeError": {
                        "Type": "Succeed"
                      }
                    }
                  },
                  "ItemsPath": "$.result",
                  "MaxConcurrency": 10,
                  "Next": "AggregateInvocationResult"
                },
                "AggregateInvocationResult": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "Payload.$": "$",
                    "FunctionName": "${InvokeSummaryLambdaArn}"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "End": true
                }
              }
            }
          - {
            InvokeLambdaArn: !GetAtt InvokeLLM.Arn,
            ConvertToJsonLambdaArn: !GetAtt ConvertToJson.Arn,
            InvokeSummaryLambdaArn: !GetAtt InvokeResultSummary.Arn
          }
      RoleArn: !GetAtt LLMInvocationStatesExecutionRole.Arn
  LLMIEvaluationStatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                # TODO: narrow down
                Resource: "*"
        - PolicyName: StatesLogPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DeleteResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:CreateLogGroup
                Resource: "*"
  EvaluateLLMStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: Evaluate-LLM
      DefinitionString:
        Fn::Sub:
          - |-
            {
               "Comment":"Evaluate state machine",
               "StartAt":"Evaluate",
               "States":{
                  "Evaluate":{
                     "Type":"Parallel",
                     "Branches":[
                        {
                           "StartAt":"ClarifyEval_input_processor",
                           "States":{
                              "ClarifyEval_input_processor":{
                                 "Type":"Task",
                                 "Resource":"arn:aws:states:::lambda:invoke",
                                 "OutputPath":"$.Payload",
                                 "Parameters":{
                                    "Payload.$":"$",
                                    "FunctionName":"${FMEvalValidationInputArn}"
                                 },
                                 "Retry":[
                                    {
                                       "ErrorEquals":[
                                          "Lambda.ServiceException",
                                          "Lambda.AWSLambdaException",
                                          "Lambda.SdkClientException",
                                          "Lambda.TooManyRequestsException"
                                       ],
                                       "IntervalSeconds":1,
                                       "MaxAttempts":3,
                                       "BackoffRate":2
                                    }
                                 ],
                                 "Next":"ClarifyEvalMap"
                              },
                            "ClarifyEvalMap":{
                                 "Type":"Map",
                                 "ItemProcessor":{
                                    "ProcessorConfig":{
                                       "Mode":"INLINE"
                                    },
                                    "StartAt":"ClarifyEvaluate",
                                    "States":{
                                       "ClarifyEvaluate":{
                                          "Type":"Task",
                                          "Resource":"arn:aws:states:::lambda:invoke",
                                          "Parameters":{
                                             "FunctionName":"${EvaluateMetricArn}",
                                             "Payload.$":"$"
                                          },
                                          "Retry":[
                                             {
                                                "ErrorEquals":[
                                                   "States.ALL"
                                                ],
                                                "IntervalSeconds":1,
                                                "MaxAttempts":3,
                                                "BackoffRate":2
                                             }
                                          ],
                                          "End": true,
                                          "ResultSelector":{
                                             "result.$":"$.Payload"
                                          },
                                          "ResultPath":"$.result"
                                       }
                                    }
                                 },
                                 "ItemsPath":"$.result",
                                 "End": true,
                                 "MaxConcurrency":5
                              }
                           }
                        },
                        {
                           "StartAt":"CustomerizedEval_input_process",
                           "States":{
                              "CustomerizedEval_input_process":{
                                 "Type":"Task",
                                 "Resource":"arn:aws:states:::lambda:invoke",
                                 "OutputPath":"$.Payload",
                                 "Parameters":{
                                    "Payload.$":"$",
                                    "FunctionName":"${LLMEvalInputProcessorLambdaArn}"
                                 },
                                 "Retry":[
                                    {
                                       "ErrorEquals":[
                                          "States.ALL"
                                       ],
                                       "IntervalSeconds":1,
                                       "MaxAttempts":3,
                                       "BackoffRate":2
                                    }
                                 ],
                                 "Next":"CustomerizedEvalMap"
                              },
                              "CustomerizedEvalMap":{
                                 "Type":"Map",
                                 "ItemProcessor":{
                                    "ProcessorConfig":{
                                       "Mode":"INLINE"
                                    },
                                    "StartAt":"CustomerizedEvaluate",
                                    "States":{
                                       "CustomerizedEvaluate":{
                                          "Type":"Task",
                                          "Resource":"arn:aws:states:::lambda:invoke",
                                          "Parameters":{
                                             "FunctionName":"${LLMEvalLambdaArn}",
                                             "Payload":{
                                                "execution_id.$":"$$.Execution.Id",
                                                "input.$":"$"
                                             }
                                          },
                                          "Retry":[
                                             {
                                                "ErrorEquals":[
                                                   "States.ALL"
                                                ],
                                                "IntervalSeconds":1,
                                                "MaxAttempts":3,
                                                "BackoffRate":2
                                             }
                                          ],
                                          "Catch":[
                                             {
                                                "ErrorEquals":[
                                                   "States.ALL"
                                                ],
                                                "Next":"InvokeError"
                                             }
                                          ],
                                          "End":true,
                                          "ResultSelector":{
                                             "result.$":"$.Payload"
                                          },
                                          "ResultPath":"$.result"
                                       },
                                       "InvokeError":{
                                          "Type":"Succeed"
                                       }
                                    }
                                 },
                                 "ItemsPath":"$.result",
                                 "Next":"CustomerizedEval_summarize_result",
                                 "MaxConcurrency":10
                              },
                              "CustomerizedEval_summarize_result":{
                                 "Type":"Task",
                                 "Resource":"arn:aws:states:::lambda:invoke",
                                 "OutputPath":"$.Payload",
                                 "Parameters":{
                                    "Payload":{
                                       "executionId.$":"$$.Execution.Id",
                                       "input.$":"$"
                                    },
                                    "FunctionName":"${EvaluateLLMSummaryArn}"
                                 },
                                 "Retry":[
                                    {
                                       "ErrorEquals":[
                                          "States.ALL"
                                       ],
                                       "IntervalSeconds":1,
                                       "MaxAttempts":3,
                                       "BackoffRate":2
                                    }
                                 ],
                                 "End":true
                              }
                           }
                        }
                     ],
                     "End":true
                  }
               }
            }
          - {
            LLMEvalInputProcessorLambdaArn: !GetAtt ValidateLLMEvaluateInput.Arn,
            LLMEvalLambdaArn: !GetAtt EvaluateLLM.Arn,
            EvaluateLLMSummaryArn: !GetAtt EvaluationResultSummary.Arn,
            FMEvalValidationInputArn: !GetAtt FMEvalValidationInput.Arn,
            EvaluateMetricArn: !GetAtt EvaluateMetric.Arn
          }
      RoleArn: !GetAtt LLMIEvaluationStatesExecutionRole.Arn
  InvokeLLM:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: invoke_llm_lambda
      Handler: invoke_llm_handler.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        SecurityGroupIds:
          - !Ref SecurityGroup
      Timeout: 100
      Environment:
        Variables:
          ResultBucket: !Sub '${EvaluationBucket}'
          LLMEndpoint: !Sub "http://${LLMInternalALB.DNSName}:8001/invoke"
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:10
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
                - bedrock:*
                - sagemaker:*
              Resource: "*"
  InvokeResultSummary:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: invoke_llm_result_summary
      Handler: invoke_llm_result_summary.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      Timeout: 30
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:10
      Environment:
        Variables:
          ResultBucket: !Sub '${EvaluationBucket}'
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
              Resource: "*"

  EvaluateLLM:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: evaluate_llm_lambda
      Handler: evaluate_llm_handler.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        SecurityGroupIds:
          - !Ref SecurityGroup
      Environment:
        Variables:
          ResultBucket: !Sub '${EvaluationBucket}'
          LLMEndpoint: !Sub "http://${LLMInternalALB.DNSName}:8001/invoke"
      Timeout: 200
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:10
        - !Ref Boto3Layer
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
                - bedrock:*
                - sagemaker:*
                - dynamodb:GetItem
                - dynamodb:Query
              Resource: "*"

  Boto3Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: boto3-layer
      Description: "new boto3 layer with bedrock-runtime service"
      Content:
        S3Bucket: !Sub "eval-${AWS::AccountId}-${AWS::Region}"
        S3Key: boto3-layer.zip
      CompatibleRuntimes:
        - python3.9

  EvaluateMetric:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: evaluate_metrics_lambda
      Handler: eval_metrics.lambda_handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      Environment:
        Variables:
          Bucket: !Sub '${EvaluationBucket}'
          TrainingURL: !Ref TrainingURL
          MetricPrefix: !Ref MetricPrefix
          SagemakerRoleArn: !GetAtt SageMakerRole.Arn
      Timeout: 200
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AmazonSageMakerFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
                - bedrock:*
                - sagemaker:*
                - dynamodb:GetItem
                - dynamodb:Query
              Resource: "*"

  ConvertToJson:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: invoke_llm_convert_to_json
      Handler: invoke_llm_convert_to_json.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      Timeout: 5
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:10
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - logs:*
              Resource: "*"

  ValidateLLMEvaluateInput:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: evaluate_llm_input_validation
      Handler: evaluate_llm_input_validation.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      Timeout: 5
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
                - dynamodb:GetItem
                - dynamodb:Query
              Resource: "*"

  FMEvalValidationInput:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fmeval_input_validation
      Handler: fmeval_input_validation.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      Timeout: 5
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
                - dynamodb:GetItem
                - dynamodb:Query
              Resource: "*"

  EvaluationResultSummary:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: evaluate_llm_result_summary
      Handler: evaluate_llm_result_summary.handler
      Runtime: python3.9
      CodeUri: ../lambda
      MemorySize: 1024
      Timeout: 30
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:10
      Environment:
        Variables:
          ResultBucket: !Sub '${EvaluationBucket}'
          ResultDatabase: !Ref ResultDatabase
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # TODO narrow down
                - s3:*
                - glue:GetTable
                - glue:GetDatabase
                - glue:CreateTable
                - glue:UpdateTable
                - glue:BatchCreatePartition
              Resource: "*"


  SolutionTableDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        -
          AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "SolutionTableDDB"

  ResultDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: "llmeval_result"